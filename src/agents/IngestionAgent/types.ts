import * as z from 'zod';
import { BaseAgentConfigSchema, BaseMetrics } from '../BaseAgent/types';

// Match your actual Supabase schema:
export const RawPropSchema = z.object({
  scraped_at: z.string().or(z.date()).nullable(),      // timestamp with time zone
  edge_score: z.number().int().nullable(),
  auto_approved: z.boolean().nullable(),
  context_flag: z.boolean().nullable(),
  created_at: z.string().or(z.date()).nullable(),      // timestamp without time zone
  promoted_to_picks: z.boolean().nullable(),
  game_id: z.string().nullable(),                      // uuid (store as string for ingest)
  outcomes: z.any().nullable(),                        // jsonb (parse as object/array)
  player_id: z.number().int().nullable(),
  promoted_at: z.string().or(z.date()).nullable(),
  unit_size: z.number().nullable(),
  promoted: z.boolean().nullable(),
  ev_percent: z.number().nullable(),
  trend_score: z.number().int().nullable(),
  matchup_score: z.number().int().nullable(),
  line_score: z.number().int().nullable(),
  role_score: z.number().int().nullable(),
  is_promoted: z.boolean().nullable(),
  updated_at: z.string().or(z.date()).nullable(),
  is_alt_line: z.boolean().nullable(),
  is_primary: z.boolean().nullable(),
  is_valid: z.boolean().nullable(),
  over_odds: z.number().nullable(),
  under_odds: z.number().nullable(),
  game_time: z.string().or(z.date()).nullable(),       // timestamp with time zone
  id: z.string().uuid().optional(),                    // uuid, generated by db
  line: z.number().nullable(),
  odds: z.number().int().nullable(),
  game_date: z.string().nullable(),                    // date
  trend_confidence: z.number().int().nullable(),
  matchup_quality: z.number().int().nullable(),
  line_value_score: z.number().int().nullable(),
  role_stability: z.number().int().nullable(),
  confidence_score: z.number().int().nullable(),
  player_name: z.string().nullable(),
  sport: z.string().nullable(),
  team: z.string().nullable(),
  stat_type: z.string().nullable(),
  outcome: z.string().nullable(),
  direction: z.string().nullable(),
  player_slug: z.string().nullable(),
  external_game_id: z.string().nullable(),
  matchup: z.string().nullable(),
  sport_key: z.string().nullable(),
  fair_odds: z.string().nullable(),
  source: z.string().nullable(),
  provider: z.string().nullable(),
  raw_data: z.any().nullable(),                        // jsonb for storing original data
});

export type RawProp = z.infer<typeof RawPropSchema>;

// Data provider configuration
export const DataProviderSchema = z.object({
  name: z.string(),
  enabled: z.boolean().default(true),
  url: z.string().url(),
  apiKey: z.string().optional(),
  headers: z.record(z.string()).optional(),
  timeout: z.number().default(30000),
  retryAttempts: z.number().default(3),
  retryDelay: z.number().default(1000),
  rateLimit: z.object({
    requests: z.number().default(100),
    window: z.number().default(60000), // 1 minute
  }).optional(),
});

export type DataProvider = z.infer<typeof DataProviderSchema>;

// IngestionAgent specific configuration
export const IngestionAgentConfigSchema = z.object({
  providers: z.array(DataProviderSchema),
  batchSize: z.number().min(1).max(1000).default(100),
  processingTimeout: z.number().default(300000), // 5 minutes
  duplicateCheckEnabled: z.boolean().default(true),
  duplicateCheckWindow: z.number().default(86400000), // 24 hours in ms
  validationEnabled: z.boolean().default(true),
  normalizationEnabled: z.boolean().default(true)
}).merge(BaseAgentConfigSchema);

export type IngestionAgentConfig = z.infer<typeof IngestionAgentConfigSchema>;

// IngestionAgent specific metrics
export interface IngestionMetrics extends BaseMetrics {
  ingestedCount: number;
  skippedCount: number;
  errorCount: number;
  lastIngestionTime: Date | null;
  providersConfigured: number;
  batchSize: number;
  propsIngested: number;
  duplicatesFiltered: number;
  validationErrors: number;
  providerStats: Record<string, any>;
  processingTimeMs: number;
}

// Result of an ingestion run
export interface IngestionResult {
  totalFetched: number;
  ingested: number;
  skipped: number;
  errors: number;
  duration: number;
  timestamp: Date;
}

// Validation result
export interface ValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
}

// Normalization result
export interface NormalizationResult {
  normalized: RawProp;
  changes: string[];
  warnings: string[];
}

// Export schemas for validation
export const schemas = {
  RawProp: RawPropSchema,
  DataProvider: DataProviderSchema,
  IngestionAgentConfig: IngestionAgentConfigSchema
};