// AUTO-GENERATED BY CURSOR: BaseAgent smoke test
import { BaseAgent } from '..';
import { BaseAgentConfig, BaseAgentDependencies } from '@shared/types/baseAgent';

const mockConfig: BaseAgentConfig = {
  name: 'Dummy',
  version: '0.0.0',
  enabled: true,
  logLevel: 'info',
  metrics: { enabled: false, interval: 60 },
  health:  { enabled: false, interval: 30 },
  retry:   { maxRetries: 0, backoffMs: 200, maxBackoffMs: 500 }
};

const deps = {
  supabase: {} as any,
  logger:   { info: jest.fn(), error: jest.fn() } as any,
  errorHandler: { withRetry: (fn: any) => fn() } as any
} satisfies BaseAgentDependencies;

class DummyAgent extends BaseAgent {
  protected async initialize()   {}
  protected async process()      {}
  protected async cleanup()      {}
  protected async checkHealth():   Promise<HealthStatus> { return { status: 'healthy', timestamp: new Date().toISOString() }; }
  protected async collectMetrics(): Promise<BaseMetrics> {
    return { successCount: 0, errorCount: 0, warningCount: 0, processingTimeMs: 0, memoryUsageMb: 0 };
  }
}

describe('BaseAgent smoke', () => {
  it('instantiates & runs lifecycle without error', async () => {
    const a = new DummyAgent(mockConfig, deps);
    await expect(a.start()).resolves.not.toThrow();
    await expect(a.stop()).resolves.not.toThrow();
  });
}); 