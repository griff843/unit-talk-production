// AUTO-GENERATED BY CURSOR: BaseAgent smoke test
import { BaseAgent } from '..';
import { BaseAgentConfig, BaseAgentDependencies, HealthStatus, BaseMetrics } from '../types';

const mockConfig: BaseAgentConfig = {
  name: 'Dummy',
  version: '0.0.0',
  enabled: true,
  logLevel: 'info',
  metrics: { enabled: false, interval: 60 },
  health: { enabled: false, interval: 30, timeout: 5000, checkDb: false, checkExternal: false },
  retry: {
    enabled: true,
    maxRetries: 0,
    backoffMs: 200,
    maxBackoffMs: 500,
    maxAttempts: 1,
    backoff: 200,
    exponential: false,
    jitter: false
  }
};

const deps = {
  supabase: {} as any,
  logger: { info: jest.fn(), error: jest.fn(), debug: jest.fn(), warn: jest.fn(), child: jest.fn() } as any,
  errorHandler: { withRetry: (fn: any) => fn(), handleError: jest.fn() } as any
} satisfies BaseAgentDependencies;

class DummyAgent extends BaseAgent {
  protected async initialize() {}

  protected async process() {}

  protected async cleanup() {}

  public async checkHealth(): Promise<HealthStatus> {
    return {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      details: {}
    };
  }

  public async collectMetrics(): Promise<BaseMetrics> {
    return {
      agentName: 'Dummy',
      successCount: 0,
      errorCount: 0,
      warningCount: 0,
      processingTimeMs: 0,
      memoryUsageMb: 0
    };
  }
}

describe('BaseAgent smoke', () => {
  it('instantiates & runs lifecycle without error', async () => {
    const a = new DummyAgent(mockConfig, deps);
    await expect(a.start()).resolves.not.toThrow();
    await expect(a.stop()).resolves.not.toThrow();
  });
}); 