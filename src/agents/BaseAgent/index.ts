// AUTO-GENERATED BY CURSOR: BaseAgent implementation v2
import { EventEmitter } from 'events';
import { z } from 'zod';
import {
  BaseAgentConfigSchema,
  BaseAgentConfig,
  BaseMetrics,
  HealthStatus,
  BaseAgentDependencies,
  AgentStatus
} from './types';

/**
 * Abstract BaseAgent – all business agents must extend this class.
 */
export abstract class BaseAgent extends EventEmitter {
  protected readonly config: BaseAgentConfig;
  protected readonly deps:   BaseAgentDependencies;

  private status: AgentStatus = 'idle';
  private lastMetrics: BaseMetrics | null = null;

  constructor(config: BaseAgentConfig, deps: BaseAgentDependencies) {
    super();
    // Validate config immediately
    this.config = BaseAgentConfigSchema.parse(config);
    this.deps   = deps;
  }

  /* ------------------------------------------------------------------ *
   *           PUBLIC LIFECYCLE – DO NOT OVERRIDE IN CHILDREN           *
   * ------------------------------------------------------------------ */
  public async start(): Promise<void> {
    if (this.status !== 'idle') return;
    this.status = 'initializing';
    await this.initialize();
    this.status = 'running';
    // Kick off processing loop (if any)
    void this.safeProcessLoop();
  }

  public async stop(): Promise<void> {
    if (this.status !== 'running') return;
    this.status = 'stopping';
    await this.cleanup();
    this.status = 'stopped';
  }

  /* ------------------------------------------------------------------ *
   *             ABSTRACT HOOKS EVERY AGENT MUST IMPLEMENT              *
   * ------------------------------------------------------------------ */
  protected abstract initialize(): Promise<void>;
  protected abstract process():   Promise<void>;
  protected abstract cleanup():   Promise<void>;

  /** Called by BaseAgent on schedule */
  protected abstract checkHealth():   Promise<HealthStatus>;
  protected abstract collectMetrics(): Promise<BaseMetrics>;

  /* ------------------------------------------------------------------ *
   *                         INTERNAL HELPERS                           *
   * ------------------------------------------------------------------ */
  private async safeProcessLoop(): Promise<void> {
    const { metrics } = this.config;
    while (this.status === 'running') {
      const started = Date.now();
      try {
        await this.process();
      } catch (err) {
        this.status = 'error';
        this.emit('error', err);
      }
      // Metrics
      if (metrics.enabled) {
        try {
          this.lastMetrics = await this.collectMetrics();
          this.emit('metrics', this.lastMetrics);
        } catch { /* swallow */ }
      }
      // Wait for next tick
      await new Promise(r => setTimeout(r, metrics.interval * 1000));
      if (Date.now() - started < 0) break; // should never happen
    }
  }
} 