import { FinalPick } from '../../types/picks';
import { EmbedBuilder } from 'discord.js';
import dayjs from 'dayjs';

function formatPickLine(pick: FinalPick): string {
  const emoji = pick.outcome === 'win' ? '✅' : pick.outcome === 'loss' ? '❌' : '⏳';
  const units = pick.units || 1;
  const matchup = pick.matchup || `${pick.team_name || ''}`;
  const line = `${pick.player_name || matchup} ${pick.market_type || ''} ${pick.line || ''}`;
  return `${line} ${emoji} (${units}U)`;
}

function groupByCapper(picks: FinalPick[]) {
  const map: { [capper: string]: FinalPick[] } = {};
  for (const pick of picks) {
    const name = pick.capper || 'Unknown';
    if (!map[name]) map[name] = [];
    map[name].push(pick);
  }
  return map;
}

function getStats(picks: FinalPick[]) {
  let wins = 0;
  let losses = 0;
  let units = 0;

  for (const pick of picks) {
    if (pick.outcome === 'win') {
      wins++;
      units += pick.units || 1;
    } else if (pick.outcome === 'loss') {
      losses++;
      units -= pick.units || 1;
    }
  }

  const winRate = picks.length > 0 ? ((wins / picks.length) * 100).toFixed(1) : '0';
  return { wins, losses, units, winRate };
}

export function buildDailyRecapEmbed(picks: FinalPick[], dateStr: string): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setTitle(`📊 Daily Recap — ${dayjs(dateStr).format('MMM D, YYYY')}`)
    .setColor('#00FF88')
    .setTimestamp();

  const solo = picks.filter(p => !p.parlay_id);
  const parlay = picks.filter(p => p.parlay_id);

  const { wins, losses, units, winRate } = getStats(picks);
  embed.setDescription(
    `**Overall Record:** ${wins}-${losses} (${winRate}% WR)\n` +
    `**Net Units:** ${units.toFixed(1)}U\n` +
    `**Total Picks:** ${picks.length}\n`
  );

  if (solo.length > 0) {
    embed.addFields({
      name: '🎯 Solo Picks',
      value: solo.map(formatPickLine).slice(0, 10).join('\n') || '—'
    });
  }

  if (parlay.length > 0) {
    embed.addFields({
      name: '💥 Parlays',
      value: parlay.map(formatPickLine).slice(0, 10).join('\n') || '—'
    });
  }

  // Capper breakdown
  const byCapper = groupByCapper(picks);
  const capperStats = Object.entries(byCapper).map(([name, capperPicks]) => {
    const { wins, losses, units } = getStats(capperPicks);
    return `**${name}**: ${wins}-${losses} (${units >= 0 ? '+' : ''}${units.toFixed(1)}U)`;
  });

  embed.addFields({
    name: '🧠 Cappers',
    value: capperStats.join('\n') || '—',
    inline: false
  });

  embed.setFooter({ text: `Recap generated by Unit Talk | RecapAgent` });

  return embed;
}
