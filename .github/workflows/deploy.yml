name: Continuous Deployment

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          load: true

      - name: Save Docker image
        run: docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} > image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load < image.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: unit-talk-staging
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to ECS
        id: deploy
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_STAGING }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE_STAGING }}
          ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION_STAGING }}
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          echo "::set-output name=deployment-url::https://staging-api.unit-talk.com"

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to complete..."
          aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER_STAGING }} --services ${{ secrets.ECS_SERVICE_STAGING }}
          echo "Deployment completed successfully"
          
      - name: Run health check
        run: |
          HEALTH_CHECK_URL="https://staging-api.unit-talk.com/health"
          MAX_RETRIES=10
          RETRY_INTERVAL=15
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Health check attempt $i of $MAX_RETRIES"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL || echo "failed")
            
            if [ "$RESPONSE" == "200" ]; then
              echo "Health check passed!"
              exit 0
            else
              echo "Health check failed with response: $RESPONSE. Retrying in $RETRY_INTERVAL seconds..."
              sleep $RETRY_INTERVAL
            fi
          done
          
          echo "Health check failed after $MAX_RETRIES attempts"
          exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load < image.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push image to Amazon ECR
        id: push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: unit-talk-production
          IMAGE_TAG: ${{ github.sha }}
          RELEASE_TAG: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || 'latest' }}
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$RELEASE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy to ECS (Blue/Green)
        id: deploy
        env:
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER_PRODUCTION }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE_PRODUCTION }}
          CODEDEPLOY_APPLICATION: ${{ secrets.CODEDEPLOY_APPLICATION }}
          CODEDEPLOY_DEPLOYMENT_GROUP: ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }}
          TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION_PRODUCTION }}
          CONTAINER_NAME: "unit-talk-app"
        run: |
          # Get current task definition
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition.json
          
          # Update container image in task definition
          jq --arg IMAGE "${{ steps.push-image.outputs.image }}" \
            '.containerDefinitions[0].image = $IMAGE' \
            task-definition.json > new-task-definition.json
          
          # Register new task definition
          NEW_TASK_DEF=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          
          # Start deployment
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APPLICATION \
            --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
            --revision '{"revisionType":"AppSpecContent","appSpecContent":{"content":"{\"version\":1,\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"'"$NEW_TASK_DEF"'\",\"LoadBalancerInfo\":{\"ContainerName\":\"'"$CONTAINER_NAME"'\",\"ContainerPort\":9000}}}}]}","sha256":"'"$(echo -n "{\"version\":1,\"Resources\":[{\"TargetService\":{\"Type\":\"AWS::ECS::Service\",\"Properties\":{\"TaskDefinition\":\"$NEW_TASK_DEF\",\"LoadBalancerInfo\":{\"ContainerName\":\"$CONTAINER_NAME\",\"ContainerPort\":9000}}}}]}" | shasum -a 256 | cut -d' ' -f1)"'"}}'
          
          echo "::set-output name=deployment-url::https://api.unit-talk.com"

      - name: Wait for deployment to complete
        run: |
          # Get deployment ID
          DEPLOYMENT_ID=$(aws deploy list-deployments \
            --application-name ${{ secrets.CODEDEPLOY_APPLICATION }} \
            --deployment-group-name ${{ secrets.CODEDEPLOY_DEPLOYMENT_GROUP }} \
            --query "deployments[0]" \
            --output text)
          
          # Wait for deployment to complete
          aws deploy wait deployment-successful --deployment-id $DEPLOYMENT_ID
          echo "Deployment completed successfully"

      - name: Run production health check
        run: |
          HEALTH_CHECK_URL="https://api.unit-talk.com/health"
          MAX_RETRIES=15
          RETRY_INTERVAL=20
          
          for ((i=1; i<=MAX_RETRIES; i++)); do
            echo "Health check attempt $i of $MAX_RETRIES"
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL || echo "failed")
            
            if [ "$RESPONSE" == "200" ]; then
              echo "Health check passed!"
              exit 0
            else
              echo "Health check failed with response: $RESPONSE. Retrying in $RETRY_INTERVAL seconds..."
              sleep $RETRY_INTERVAL
            fi
          done
          
          echo "Health check failed after $MAX_RETRIES attempts"
          exit 1

  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify success
        if: ${{ success() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "✅ Deployment Successful! Repository: ${{ github.repository }}, Ref: ${{ github.ref_name }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          
      - name: Notify failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "❌ Deployment Failed! Repository: ${{ github.repository }}, Ref: ${{ github.ref_name }}, Workflow: ${{ github.workflow }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
